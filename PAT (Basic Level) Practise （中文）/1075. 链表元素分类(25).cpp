/*

1075. 链表元素分类(25)
时间限制
400 ms
内存限制
65536 kB
代码长度限制
8000 B
判题程序
Standard
作者
CHEN, Yue
给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而[0, K]区间内的元素都排在大于K的元素前面。但每一类内部元素的顺序是不能改变的。例如：给定链表为 18→7→-4→0→5→-6→10→11→-2，K为10，则输出应该为 -4→-6→-2→7→0→5→10→18→11。

输入格式：

每个输入包含1个测试用例。每个测试用例第1行给出：第1个结点的地址；结点总个数，即正整数N (<= 105)；以及正整数K (<=1000)。结点的地址是5位非负整数，NULL地址用-1表示。

接下来有N行，每行格式为：

Address Data Next

其中Address是结点地址；Data是该结点保存的数据，为[-105, 105]区间内的整数；Next是下一结点的地址。题目保证给出的链表不为空。

输出格式：

对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。

输入样例：
00100 9 10
23333 10 27777
00000 0 99999
00100 18 12309
68237 -6 23333
33218 -4 00000
48652 -2 -1
99999 5 68237
27777 11 48652
12309 7 33218
输出样例：
33218 -4 68237
68237 -6 48652
48652 -2 12309
12309 7 00000
00000 0 99999
99999 5 23333
23333 10 00100
00100 18 27777
27777 11 -1

*/

#include<iostream>
#include<vector>
#include<unordered_map>
#include<cstdio>
#include<algorithm>
#include<iterator>
#include<utility>

using namespace std;

int main() {
	unordered_map<int, pair<int, int>> LinkList;
	vector<pair<int, int>> negative, less_eq_k, greater_k, result;
	int begin, n, k, addr, data, next;
	cin >> begin >> n >> k;
	for (int i = 0; i < n; i++) {
		cin >> addr >> data >> next;
		LinkList[addr] = make_pair(data, next);
	}

	int ptr = begin;
	while (ptr != -1) {
		int data = LinkList[ptr].first;
		int next = LinkList[ptr].second;
		auto New_Node = make_pair(ptr, data);
		if (data < 0)	negative.push_back(New_Node);
		else if (data <= k)	less_eq_k.push_back(New_Node);
		else greater_k.push_back(New_Node);
		ptr = next;
	}

	copy(negative.begin(), negative.end(), back_inserter(result));
	copy(less_eq_k.begin(), less_eq_k.end(), back_inserter(result));
	copy(greater_k.begin(), greater_k.end(), back_inserter(result));
	int index = result.size()-1;
	for (int i = 0; i < index; i++) {
		printf("%05d %d %05d\n", result[i].first, result[i].second, result[i + 1].first);
	}
	printf("%05d %d -1\n", result[index].first, result[index].second);

	return 0;
}